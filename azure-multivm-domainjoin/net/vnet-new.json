{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "virtualNetworkName": {
            "type": "String",
            "metadata": {
                "description": "Name of a new or existing virtual network to use for the VMs."
            },
            "defaultValue": "default"
        },
        "subnetName": {
            "defaultValue": "default",
            "type": "String"
        },
        "addressSpaces": {
            "type": "array",
            "metadata": {
                "description": "Address Space for the Virtual Network. Only used if vnet does not exist."
            },
            "defaultValue": [ "10.10.11.0/24", "10.10.10.0/24" ]
        },
        "subnetCount": {
            "type": "int",
            "defaultValue": 3
        },
        "addBastionSubnet": {
            "type": "bool",
            "metadata": {
                "description": "Set to true to automatically postpend an AzureBastionSubnet address within the vnet address space."
            },
            "defaultValue": false
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "debugOutput": {
            "type": "bool",
            "defaultValue": false
        }
    },
    "variables": {
        "baseName": "[take(replace(replace(replace(resourceGroup().name, ' ', ''),'-rg', ''), '_', '-'),23)]",
        "virtualNetworkName": "[if(equals('default', parameters('virtualNetworkName')),concat('vn-', variables('baseName')),parameters('virtualNetworkName'))]",
        "subnetName": "[if(equals('default', parameters('subnetName')),concat('sn-', variables('baseName')),parameters('subnetName'))]",
        "virtualNetworkResId": "[resourceId('Microsoft.Network/virtualnetworks', variables('virtualNetworkName'))]",
        "deployVnet": "[if(empty(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))), bool('true'), bool('false'))]",
        "subnetCount": "[if(parameters('addBastionSubnet'), add(parameters('subnetCount'), 1), parameters('subnetCount'))]",
        "subnetSlicing": [
            [ "0/24" ],
            [ "0/25", "128/25" ],
            [ "0/26", "128/26", "192/26" ],
            [ "0/26", "64/26", "128/26", "192/26" ],
            [ "0/27", "32/27", "64/27", "128/27", "160/27" ],
            [ "0/27", "32/27", "64/27", "128/27", "160/27", "192/27" ]
        ],
        "strAddressSpace": "[string(parameters('addressSpaces')[0])]",
        "subnetBase": "[take(variables('strAddressSpace'), lastIndexOf(variables('strAddressSpace'),'.'))]",
        "copy": [
            {
                "name": "subnetPrefixes",
                "count": "[variables('subnetCount')]",
                "input": "[concat(variables('subnetBase'),'.',replace(replace(string(variables('subnetSlicing')[variables('subnetCount')][copyIndex('subnetPrefixes')]),'[',''),'\"',''))]"
            }
        ],
        "vNetProperties": {
            "addressSpace": {
                "addressPrefixes": "[parameters('addressSpaces')]"
            },
            "copy": [
                {
                    "name": "subnets",
                    "count": "[parameters('subnetCount')]",
                    "input": {
                        "name": "[concat(variables('subnetName'), copyIndex('subnets', 1))]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefixes')[copyIndex('subnets')]]"
                        }
                    }
                }
            ]
        }
    },
    "resources": [
        {
            "condition": "[and(variables('deployVnet'), not(parameters('debugOutput')))]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2017-09-01",
            "name": "[variables('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "properties": "[variables('vNetProperties')]"
        },
        {
            "condition": "[and(parameters('addBastionSubnet'), not(parameters('debugOutput')))]",
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2019-09-01",
            "name": "[concat(variables('virtualNetworkName'), '/', 'AzureBastionSubnet')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('virtualNetworkResId')]"
            ],
            "properties": {
                "addressPrefix": "[variables('subnetPrefixes')[parameters('subnetCount')]]"
            }
        }
    ],
    "outputs": {
        "vNetResId": {
            "type": "string",
            "value": "[variables('virtualNetworkResId')]"
        },
        "subnetBase": {
            "type": "string",
            "value": "[variables('subnetBase')]"
        },
        "vNetName": {
            "type": "string",
            "value": "[variables('virtualNetworkName')]"
        },
        "subnetNames": {
            "type": "array",
            "copy": {
                "count": "[length(variables('vNetProperties').subnets)]",
                "input": "[variables('vNetProperties').subnets[copyIndex()].name]"
            }
        },
        "subnetIDs": {
            "type": "array",
            "copy": {
                "count": "[length(variables('vNetProperties').subnets)]",
                "input": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('vNetProperties').subnets[copyIndex()].name)]"
            }
        },
        "allSubnets": {
            "type": "array",
            "value": "[variables('vNetProperties').subnets]"
        }
    }
}
